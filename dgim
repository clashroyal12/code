import math

# Sample stream (0s and 1s)
stream = [1,0,1,1,0,1,0,1,1,1,0,1]
N = 8  # window size

# DGIM buckets: list of (timestamp, size)
buckets = []

def add_bit(bit, time):
    global buckets
    if bit == 1:
        buckets.insert(0, (time, 1))  # newest at front
        merge_buckets()

def merge_buckets():
    i = 0
    while i < len(buckets)-2:
        # merge if three buckets of same size
        if buckets[i][1]==buckets[i+1][1]==buckets[i+2][1]:
            # merge last two
            merged = (buckets[i+1][0], buckets[i+1][1]*2)
            buckets[i+1] = merged
            del buckets[i+2]
        else:
            i += 1

def estimate_ones(current_time):
    total = 0
    for i,(t,s) in enumerate(buckets):
        if t > current_time-N:
            total += s
        else:
            total += s/2  # partially counted oldest bucket
            break
    return total

# Process the stream
for time, bit in enumerate(stream,1):
    add_bit(bit, time)

print("Buckets:", buckets)
print("Estimated 1s in last", N, "bits:", estimate_ones(len(stream)))
