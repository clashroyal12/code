#!pip install pandas numpy matplotlib seaborn scikit-learn       
#[for py remove !and run in terminal not in code]

# ==========================================================
# üéì DBSCAN Clustering Demonstration (Built-in Iris Dataset)
# ==========================================================

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import DBSCAN
from sklearn.metrics import silhouette_score, confusion_matrix

# -----------------------------
# 1Ô∏è‚É£ Load Dataset
# -----------------------------
iris = load_iris()
X = iris.data   # all 4 features
y_true = iris.target

# -----------------------------
# 2Ô∏è‚É£ Standardize & Reduce to 2D for Visualization
# -----------------------------
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

# -----------------------------
# 3Ô∏è‚É£ Apply DBSCAN
# -----------------------------
dbscan = DBSCAN(eps=0.6, min_samples=5)
labels = dbscan.fit_predict(X_pca)

# Count clusters (excluding noise)
n_clusters = len(set(labels)) - (1 if -1 in labels else 0)
print(f"üß† Estimated number of clusters (excluding noise): {n_clusters}")

# -----------------------------
# 4Ô∏è‚É£ Evaluate Results
# -----------------------------
if n_clusters > 1:
    sil = silhouette_score(X_pca, labels)
    print(f"‚ú® Silhouette Score: {sil:.3f}")
else:
    print("‚ö†Ô∏è Only one cluster formed ‚Äî try adjusting eps or min_samples.")

# -----------------------------
# 5Ô∏è‚É£ Visualization
# -----------------------------
plt.figure(figsize=(8,6))
unique_labels = set(labels)
colors = [plt.cm.tab10(each) for each in np.linspace(0, 1, len(unique_labels))]

for k, col in zip(unique_labels, colors):
    if k == -1:
        # Black for noise points
        col = [0, 0, 0, 1]
    class_mask = (labels == k)
    xy = X_pca[class_mask]
    plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=tuple(col),
             markeredgecolor='k', markersize=7)

plt.title(f"üí† DBSCAN Clustering on Iris (Clusters: {n_clusters})", fontsize=14)
plt.xlabel(" Component 1")
plt.ylabel(" Component 2")
plt.grid(True)
plt.show()

# -----------------------------
# 6Ô∏è‚É£ Confusion Matrix (print in terminal)
# -----------------------------
cm = confusion_matrix(y_true, labels, labels=np.unique(labels))
print("\nüìä Confusion Matrix (True vs DBSCAN Labels):\n")
print(cm)
