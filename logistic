#!pip install pandas numpy matplotlib seaborn scikit-learn       
#[for py remove !and run in terminal not in code]



# -------------------------------
# Logistic Regression
# -------------------------------
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.metrics import (
    mean_squared_error, r2_score,
    accuracy_score, classification_report, confusion_matrix
)
# Load Iris dataset
iris = load_iris()
df = pd.DataFrame(data=iris.data, columns=iris.feature_names)
df['target'] = iris.target

# Use only 2 features for visualization
X_log = df[['petal length (cm)', 'petal width (cm)']]
y_log = df['target']

X_train_log, X_test_log, y_train_log, y_test_log = train_test_split(X_log, y_log, test_size=0.2, random_state=42)

log_reg = LogisticRegression(max_iter=200)
log_reg.fit(X_train_log, y_train_log)
y_pred_log = log_reg.predict(X_test_log)

# Metrics
acc = accuracy_score(y_test_log, y_pred_log)
print(f"Accuracy: {acc:.3f}")
print("\nClassification Report:")
print(classification_report(y_test_log, y_pred_log))

# Confusion Matrix
cm = confusion_matrix(y_test_log, y_pred_log)
plt.figure(figsize=(5,4))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=iris.target_names,
            yticklabels=iris.target_names)
plt.title("Confusion Matrix - Logistic Regression")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

# Logistic Regression Curve 
df_bin = df[df['target'] != 2]
X_bin = df_bin[['petal length (cm)']]
y_bin = (df_bin['target'] == 1).astype(int)  # Setosa=0, Versicolor=1

model_bin = LogisticRegression()
model_bin.fit(X_bin, y_bin)

x_range = np.linspace(X_bin.min(), X_bin.max(), 200)
y_prob = model_bin.predict_proba(x_range)[:,1]

plt.figure(figsize=(6,4))
plt.scatter(X_bin, y_bin, color='blue', label='Actual Data')
plt.plot(x_range, y_prob, color='red', linewidth=2, label='Logistic Curve')
plt.title("Logistic Regression Curve (Setosa vs Versicolor)")
plt.xlabel("Petal Length (cm)")
plt.ylabel("Probability of Class = 1")
plt.legend()
plt.show()






from sklearn.linear_model import LogisticRegression
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report,confusion_matrix
X=np.array([[1],[2],[4],[6],[15],[16],[17],[20]])
y=np.array([0,0,0,0,1,1,1,1])
m=LogisticRegression().fit(X,y)
x=np.linspace(0,22,200).reshape(-1,1)
y_pred=m.predict(X)
plt.scatter(X,y)
plt.plot(x,m.predict_proba(x)[:,1])
plt.show()
print(classification_report(y,y_pred))
print(confusion_matrix(y,y_pred))
