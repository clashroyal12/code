import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import VotingClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt

def combine_classifiers_experiment():
    print("\n---Combining Classifiers (Voting)---")
    data = {
        'Monthly_Charges': [50, 75, 40, 90, 60, 80, 55, 100],
        'Tenure': [50, 5, 60, 2, 45, 10, 30, 1],
        'Support_Calls': [1, 3, 0, 5, 1, 4, 0, 5],
        'Churn': [0, 1, 0, 1, 0, 1, 0, 1]
    }
    df = pd.DataFrame(data)
    X = df[['Monthly_Charges', 'Tenure', 'Support_Calls']]
    y = df['Churn']
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)
    
    # Define individual classifiers
    clf1 = LogisticRegression(random_state=1)
    clf2 = DecisionTreeClassifier(random_state=1)
    clf3 = KNeighborsClassifier(n_neighbors=1)
    
    # Combine them using hard voting (majority wins)
    eclf1 = VotingClassifier(estimators=[('lr', clf1), ('dt', clf2), ('knn', clf3)], voting='hard')
    eclf1.fit(X_train, y_train)
    y_pred = eclf1.predict(X_test)
    
    accuracy = accuracy_score(y_test, y_pred)
    
    print("\nEvaluation Metrics:")
    print(f"  Voting Classifier Accuracy: {accuracy:.4f}")
    
    # Get individual model accuracies for comparison
    print("\nIndividual Model Accuracies:")
    for clf, label in zip([clf1, clf2, clf3], ['Logistic Regression', 'Decision Tree', 'KNN']):
        clf.fit(X_train, y_train)
        score = accuracy_score(y_test, clf.predict(X_test))
        print(f"  {label}: {score:.4f}")

    # Simple plot comparing predictions (hard to show combined nature clearly)
    plt.figure(figsize=(8, 5))
    df_test = pd.DataFrame(X_test).reset_index(drop=True)
    df_test['Actual'] = y_test.reset_index(drop=True)
    df_test['Ensemble_Pred'] = y_pred
    
    plt.scatter(df_test['Tenure'], df_test['Monthly_Charges'], c=df_test['Ensemble_Pred'], cmap='viridis', s=100)
    plt.title('Voting Classifier Predictions (Feature Space)')
    plt.xlabel('Tenure')
    plt.ylabel('Monthly Charges')
    plt.show()

if __name__ == "__main__":
    combine_classifiers_experiment()
