#!pip install pandas numpy matplotlib seaborn scikit-learn       
#[for py remove !and run in terminal not in code]

# -------------------------------------------------------------
#  PCA (Principal Component Analysis)
# -------------------------------------------------------------

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

# -----------------------------
# Load and preprocess dataset
# -----------------------------
iris = load_iris()
X = iris.data
y = iris.target
target_names = iris.target_names

# Standardize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# -----------------------------
# Apply PCA (2 Components)
# -----------------------------
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

# Create DataFrame for plotting
df_pca = pd.DataFrame(X_pca, columns=['PC1', 'PC2'])
df_pca['Target'] = [target_names[i] for i in y]

# -----------------------------
# Plot 2D PCA Scatter (Matplotlib + Seaborn)
# -----------------------------
plt.figure(figsize=(8,6))
sns.scatterplot(
    x='PC1', y='PC2',
    hue='Target',
    palette='Set2',
    data=df_pca,
    s=100,
    edgecolor='k'
)

# Customize
plt.title(" PCA - 2D Scatter Plot (Iris Dataset)", fontsize=14)
plt.xlabel(f"Principal Component 1 ({pca.explained_variance_ratio_[0]*100:.2f}% Variance)")
plt.ylabel(f"Principal Component 2 ({pca.explained_variance_ratio_[1]*100:.2f}% Variance)")
plt.legend(title="Target Classes")
plt.grid(True)
plt.show()

# -----------------------------
# Print Explained Variance
# -----------------------------
print("\nðŸ”¹ Explained Variance Ratio per Component:")
for i, ratio in enumerate(pca.explained_variance_ratio_, 1):
    print(f"  PC{i}: {ratio:.2%}")
print(f" Total Variance Retained: {pca.explained_variance_ratio_.sum():.2%}")








from sklearn.decomposition import PCA
import numpy as np
import matplotlib.pyplot as plt
X = np.array([
    [1,2,3,4],
    [2,3,4,5],
    [3,4,5,6],
    [6,5,8,9],
    [7,8,9,10],
    [8,9,10,11]
])
m=PCA(n_components=2).fit(X,y)
y=m.transform(X)
plt.scatter(y[:,0],y[:,1])
plt.show()
